kube-prometheus-stack:
  kubeEtcd:
    enabled: false

  prometheusOperator:
    admissionWebhooks:
      enabled: false
      certManager:
        enabled: true
        certRef:
          name: "issuer"
          kind: "ClusterIssuer"

  grafana:
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
      hosts:
        - grafana.framsburg.ch
      tls:
        - secretName: grafana-framsburg-ch-tls
          hosts:
            - grafana.framsburg.ch
    sidecar:
      dashboards:
        searchNamespace: ALL
      datasources:
        searchNamespace: ALL
    plugins:
      - grafana-piechart-panel
    grafana.ini:
      server:
        root_url: https://grafana.framsburg.ch

  alertmanager:
    config:
      global:
        resolve_timeout: 5m
        slack_api_url_file: '/etc/alertmanager/secrets/slack-api-url/slack_api_url'
      route:
        group_by: ['job']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: slack
        routes:
          - match:
              alertname: Watchdog
            receiver: 'null'
      receivers:
        - name: 'null'
        - name: slack
          slack_configs:
            - channel: '#alerts'
              color: '{{ template "slack.color" . }}'
              title: '{{ template "slack.title" . }}'
              text: '{{ template "slack.text" . }}'
              send_resolved: true
              actions:
                - type: button
                  text: 'Runbook :green_book:'
                  url: '{{ (index .Alerts 0).Annotations.runbook_url }}'
                - type: button
                  text: 'Query :mag:'
                  url: '{{ (index .Alerts 0).GeneratorURL }}'
                - type: button
                  text: 'Dashboard :chart_with_upwards_trend:'
                  url: '{{ (index .Alerts 0).Annotations.dashboard_url }}'
                - type: button
                  text: 'Silence :no_bell:'
                  url: '{{ template "__alert_silence_link" . }}'
      templates: ['/etc/alertmanager/config/**/*.tmpl']
    templateFiles:
      template_1.tmpl: |-
          {{ define "__alert_silence_link" -}}
              {{ .ExternalURL }}/#/silences/new?filter=%7B
              {{- range .CommonLabels.SortedPairs -}}
                  {{- if ne .Name "alertname" -}}
                      {{- .Name }}%3D"{{- .Value -}}"%2C%20
                  {{- end -}}
              {{- end -}}
              alertname%3D"{{- .CommonLabels.alertname -}}"%7D
          {{- end }}
          {{ define "__alert_severity" -}}
              {{- if eq .CommonLabels.severity "critical" -}}
              *Severity:* `Critical`
              {{- else if eq .CommonLabels.severity "warning" -}}
              *Severity:* `Warning`
              {{- else if eq .CommonLabels.severity "info" -}}
              *Severity:* `Info`
              {{- else -}}
              *Severity:* :question: {{ .CommonLabels.severity }}
              {{- end }}
          {{- end }}
          {{ define "slack.title" -}}
            [{{ .Status | toUpper -}}
            {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
            ] {{ .CommonLabels.alertname }}
          {{- end }}
          {{ define "slack.text" -}}

              {{ template "__alert_severity" . }}
              {{- if (index .Alerts 0).Annotations.summary }}
              {{- "\n" -}}
              *Summary:* {{ (index .Alerts 0).Annotations.summary }}
              {{- end }}

              {{ range .Alerts }}

                  {{- if .Annotations.description }}
                  {{- "\n" -}}
                  {{ .Annotations.description }}
                  {{- "\n" -}}
                  {{- end }}
                  {{- if .Annotations.message }}
                  {{- "\n" -}}
                  {{ .Annotations.message }}
                  {{- "\n" -}}
                  {{- end }}

              {{- end }}

          {{- end }}
          {{ define "slack.color" -}}
              {{ if eq .Status "firing" -}}
                  {{ if eq .CommonLabels.severity "warning" -}}
                      warning
                  {{- else if eq .CommonLabels.severity "critical" -}}
                      danger
                  {{- else -}}
                      #439FE0
                  {{- end -}}
              {{ else -}}
              good
              {{- end }}
          {{- end }}

    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
      hosts:
        - alertmanager.framsburg.ch
      tls:
        - secretName: alertmanager-framsburg-ch-tls
          hosts:
            - alertmanager.framsburg.ch
 
    alertmanagerSpec:
      secrets:
        - slack-api-url
      externalUrl: https://alertmanager.framsburg.ch

  prometheus:
    prometheusSpec:
      externalUrl: https://prometheus.framsburg.ch
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      retentionSize: 25GB
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 30Gi
    additionalPodMonitors:
      - name: traefik
        jobLabel: traefik
        selector:
          matchLabels:
            app.kubernetes.io/instance: traefik
            app.kubernetes.io/name: traefik
        namespaceSelector:
          any: true
        podMetricsEndpoints:
          - port: metrics
            path: /metrics
            scheme: http
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
      hosts:
        - prometheus.framsburg.ch
      tls:
        - secretName: prometheus-framsburg-ch-tls
          hosts:
            - prometheus.framsburg.ch

    # thanosIngress:
    #   enabled: true
    #   annotations:
    #     kubernetes.io/ingress.class: traefik
    #     cert-manager.io/cluster-issuer: letsencrypt-prod
    #     traefik.ingress.kubernetes.io/router.entrypoints: websecure
    #   hosts:
    #     - thanos.framsburg.ch
    #   tls:
    #     - secretName: thanos-framsburg-ch-tls
    #       hosts:
    #         - thanos.framsburg.ch

