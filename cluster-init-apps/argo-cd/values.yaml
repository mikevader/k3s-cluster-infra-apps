---
argo-cd:

  global:
    domain: argocd.framsburg.ch
    logging:
      level: warn

  configs:
    params:
      server.insecure: true
    repositories:
      stable-helm-repo:
        name: stable
        type: helm
        url: https://charts.helm.sh/stable
      jetstack-helm-repo:
        name: jetstack
        type: helm
        url: https://charts.jetstack.io
      rancher-latest-helm-repo:
        name: rancher-latest
        type: helm
        url: https://releases.rancher.com/server-charts/latest

    cm: # config
      kustomize.buildOptions: "--enable-helm"
      url: https://argocd.framsburg.ch
#      oidc.config: |
#        name: Authentik
#        issuer: "https://authentik.framsburg.ch/application/o/argocd/"
#        clientID: "c579d3195f85aeccaf1ecce35ef5501e023c2a6a"
#        clientSecret: $argocd-oidc-secret:oidc.authentik.clientSecret
#        requestedScopes: ["openid", "profile", "email", "groups"]
#        logoutURL: https://authentik.framsburg.ch/application/o/argocd/end-session/
      dex.config: |
        connectors:
        - config:
            issuer: https://authentik.framsburg.ch/application/o/argocd/
            clientID: c579d3195f85aeccaf1ecce35ef5501e023c2a6a
            clientSecret: $argocd-secret:oidc.authentik.clientSecret
            insecureEnableGroups: true
            scopes:
              - openid
              - profile
              - email
          name: authentik
          type: oidc
          id: authentik

      exec.enabled: true

      statusbadge.enabled: true

      project.links: |
        - url: https://myaudit-system.com?project={{.metadata.name}}
          title: Audit
          description: system audit logs
          icon.class: "fa-book"
      # sample application level links
      application.links: |
        # pkg.go.dev/text/template is used for evaluating url templates
        - url: https://mycompany.splunk.com?search={{.spec.destination.namespace}}
          title: Splunk
        # conditionally show link e.g. for specific project
        # github.com/expr-lang/expr is used for evaluation of conditions
        - url: https://mycompany.splunk.com?search={{.spec.destination.namespace}}
          title: Splunk
          if: spec.project == "default"
        - url: https://{{.metadata.annotations.splunkhost}}?search={{.spec.destination.namespace}}
          title: Splunk
          if: metadata.annotations.splunkhost
      # sample resource level links
      resource.links: |
        - url: https://mycompany.splunk.com?search={{.metadata.namespace}}
          title: Splunk
          if: kind == "Pod" || kind == "Deployment"

    rbac: # rbacConfig
      policy.default: role:readonly
      policy.csv: |
        p, role:org-admin, applications, *, */*, allow
        p, role:org-admin, clusters, get, *, allow
        p, role:org-admin, repositories, get, *, allow
        p, role:org-admin, repositories, create, *, allow
        p, role:org-admin, repositories, update, *, allow
        p, role:org-admin, repositories, delete, *, allow
        g, fb-admins, role:admin

    # secret:
    #   githubSecret: $argocd-github-secret:webhook.github.secret
  
    # secrets:
    #   extra:
    #     webhook.github.secret: $argocd-github-secret:webhook.github.secret

  redis-ha:
    enabled: true
    exporter:
      enabled: false
  
  controller:
    replicas: 1
    dynamicClusterDistribution: false
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
      rules:
        enabled: true

  dex:
    enabled: true

  server:
    # autoscaling:
    #   enabled: true
    #   minReplicas: 2
    replicas: 2
    env:
      - name: ARGOCD_API_SERVER_REPLICAS
        value: '2'

    extraArgs:
      - --insecure
    ingress:
      enabled: true
      ingressClassName: traefik
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
      hostname: argocd.framsburg.ch
      extraTls:
        - hosts:
          - argocd.framsburg.ch
          secretName: argocd-framsburg-ch-tls

  repoServer:
    replicas: 2
    # autoscaling:
    #   enabled: true
    #   minReplicas: 2
    env:
      - name: ARGOCD_EXEC_TIMEOUT
        value: '240s'

  applicationSet:
    enabled: true
    replicaCount: 2
