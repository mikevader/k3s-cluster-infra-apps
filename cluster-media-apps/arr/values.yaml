---
radarr:
  controller:
    enabled: true

  env:
    TZ: Europe/Zurich
    APP_NAME: Radarr
    APP_PORT: "7878"
    RADARR__AUTHENTICATION_METHOD: "External"

  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        # traefik.ingress.kubernetes.io/router.priority: "10"
        # traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd

      hosts:
        - host: 'radarr.framsburg.ch'
          paths:
            - path: '/'
              pathType: Prefix
      tls:
        - hosts: ['radarr.framsburg.ch']
          secretName: 'radarr-framsburg-ch-tls'

  persistence:
    config:
      enabled: true
      type: pvc
      retain: true
      size: 10Gi
      accessMode: ReadWriteOnce

    downloads:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: torrent-transmission-downloads
      mountPath: /downloads
    sabnzbddownloads:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: sabnzbd-downloads
      mountPath: /downloads2

    movies-all:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: plex-movies-all
      mountPath: /mnt/media/movies-all

  podSecurityContext:
    runAsUser: 666
    runAsGroup: 666
    fsGroup: 666
    fsGroupChangePolicy: Always

  probes:
    liveness:
      spec:
        exec:
          command:
            - /usr/bin/env
            - bash
            - -c
            - curl --fail localhost:${APP_PORT}/${APP_NAME/-//}/api/v3/system/status?apiKey=`IFS=\> && while
              read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`

radarr-4k:
  controller:
    enabled: true

  env:
    TZ: Europe/Zurich
    APP_NAME: Radarr4k
    APP_PORT: "7878"
    RADARR__AUTHENTICATION_METHOD: "External"

  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        # traefik.ingress.kubernetes.io/router.priority: "10"
        # traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd

      hosts:
        - host: 'radarr4k.framsburg.ch'
          paths:
            - path: '/'
              pathType: Prefix
      tls:
        - hosts: ['radarr4k.framsburg.ch']
          secretName: 'radarr4k-framsburg-ch-tls'

  persistence:
    config:
      enabled: true
      type: pvc
      retain: true
      size: 10Gi
      accessMode: ReadWriteOnce

    downloads:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: torrent-transmission-downloads
      mountPath: /downloads
    sabnzbddownloads:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: sabnzbd-downloads
      mountPath: /downloads2

    movies-uhd-all:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: plex-movies-uhd-all
      mountPath: /mnt/media/movies-uhd-all

  podSecurityContext:
    runAsUser: 666
    runAsGroup: 666
    fsGroup: 666
    fsGroupChangePolicy: Always

  probes:
    liveness:
      spec:
        exec:
          command:
            - /usr/bin/env
            - bash
            - -c
            - curl --fail localhost:${APP_PORT}/${APP_NAME/-//}/api/v3/system/status?apiKey=`IFS=\> && while
              read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`


sonarr:
  controller:
    enabled: true

  env:
    TZ: Europe/Zurich
    APP_NAME: Sonarr
    APP_PORT: "8989"
    SONARR__AUTHENTICATION_METHOD: "None" # v4: External

  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        # traefik.ingress.kubernetes.io/router.priority: "10"
        traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd

      hosts:
        - host: 'sonarr.framsburg.ch'
          paths:
            - path: '/'
              pathType: Prefix
      tls:
        - hosts: ['sonarr.framsburg.ch']
          secretName: 'sonarr-framsburg-ch-tls'

  persistence:
    config:
      enabled: true
      type: pvc
      retain: true
      size: 10Gi
      accessMode: ReadWriteOnce

    downloads:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: torrent-transmission-downloads
      mountPath: /downloads
    sabnzbddownloads:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: sabnzbd-downloads
      mountPath: /downloads2

    tv-all:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: plex-tv-all
      mountPath: /mnt/media/tv-all

  podSecurityContext:
    runAsUser: 666
    runAsGroup: 666
    fsGroup: 666
    fsGroupChangePolicy: Always

  probes:
    liveness:
      spec:
        exec:
          command:
            - /usr/bin/env
            - bash
            - -c
            - curl --fail localhost:${APP_PORT}/${APP_NAME/-//}/api/v3/system/status?apiKey=`IFS=\> && while
              read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`

sonarr-4k:
  controller:
    enabled: true

  env:
    TZ: Europe/Zurich
    APP_NAME: Sonarr4k
    APP_PORT: "8989"
    SONARR__AUTHENTICATION_METHOD: "None" # v4: External

  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        # traefik.ingress.kubernetes.io/router.priority: "10"
        # traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd

      hosts:
        - host: 'sonarr4k.framsburg.ch'
          paths:
            - path: '/'
              pathType: Prefix
      tls:
        - hosts: ['sonarr4k.framsburg.ch']
          secretName: 'sonarr4k-framsburg-ch-tls'

  persistence:
    config:
      enabled: true
      type: pvc
      retain: true
      size: 10Gi
      accessMode: ReadWriteOnce

    downloads:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: torrent-transmission-downloads
      mountPath: /downloads
    sabnzbddownloads:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: sabnzbd-downloads
      mountPath: /downloads2

    tv-uhd-all:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: plex-tv-uhd-all
      mountPath: /mnt/media/tv-uhd-all

  podSecurityContext:
    runAsUser: 666
    runAsGroup: 666
    fsGroup: 666
    fsGroupChangePolicy: Always

  probes:
    liveness:
      spec:
        exec:
          command:
            - /usr/bin/env
            - bash
            - -c
            - curl --fail localhost:${APP_PORT}/${APP_NAME/-//}/api/v3/system/status?apiKey=`IFS=\> && while
              read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`

prowlarr:
  controller:
    enabled: true

  initContainers:
    prowlarr:
      name: config-prowlarr
      image: docker.io/ubuntu:noble
      securityContext:
        runAsUser: 666
        runAsGroup: 666

  env:
    TZ: Europe/Zurich
    APP_NAME: Prowlarr
    APP_PORT: "9696"
    PGID: "666"
    PUID: "666"
    PROWLARR__AUTHENTICATION_METHOD: "External"

  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        # traefik.ingress.kubernetes.io/router.priority: "10"
        # traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd

      hosts:
        - host: 'prowlarr.framsburg.ch'
          paths:
            - path: '/'
              pathType: Prefix
      tls:
        - hosts: ['prowlarr.framsburg.ch']
          secretName: 'prowlarr-framsburg-ch-tls'

  persistence:
    config:
      enabled: true
      type: pvc
      retain: true
      size: 10Gi
      accessMode: ReadWriteOnce

  probes:
    liveness:
      spec:
        exec:
          command:
            - /usr/bin/env
            - bash
            - -c
            - curl --fail localhost:${APP_PORT}/${APP_NAME/-//}/api/v1/system/status?apiKey=`IFS=\> && while
              read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`

# tdarr:
#  controller:
#    enabled: true
#
#  env:
#    TZ: Europe/Zurich
#    JAEGER_AGENT_HOST:
#      valueFrom:
#        fieldRef:
#          fieldPath: status.hostIP
#    JAEGER_AGENT_PORT: "6831"
#
#  ingress:
#    main:
#      enabled: true
#      annotations:
#        cert-manager.io/cluster-issuer: letsencrypt-prod
#        traefik.ingress.kubernetes.io/router.entrypoints: websecure
#        traefik.ingress.kubernetes.io/router.priority: "10"
#        traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd
#
#      hosts:
#        - host: 'tdarr.framsburg.ch'
#          paths:
#            - path: '/'
#              pathType: Prefix
#      tls:
#        - hosts: ['tdarr.framsburg.ch']
#          secretName: 'tdarr-framsburg-ch-tls'
#
#  persistence:
#    config:
#      enabled: true
#      type: pvc
#      size: 1Gi
#      accessMode: ReadWriteOnce
#
#    data:
#      enabled: true
#      type: pvc
#      size: 10Gi
#      accessMode: ReadWriteOnce

overseerr:
  operator:
    verify:
      failOnError: false
  ingress:
    main:
      integrations:
        traefik:
          enabled: false
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd
      hosts:
        - host: 'overseerr.framsburg.ch'
          paths:
            - path: '/'
              pathType: Prefix
      tls:
        - hosts: ['overseerr.framsburg.ch']
          secretName: 'overseerr-framsburg-ch-tls'

  persistence:
    config:
      enabled: true
      type: pvc
      size: 1Gi
      retain: true
      accessMode: ReadWriteOnce
