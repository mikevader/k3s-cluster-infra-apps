global:
  domainName: "radarr.framsburg.ch"
  # fullnameOverride: "radarr"

radarr:
  controller:
    enabled: true

  env:
    TZ: Europe/Zurich
    APP_NAME: Radarr
    APP_PORT: "7878"
    RADARR__AUTHENTICATION_METHOD: "External"
    JAEGER_AGENT_HOST:
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    JAEGER_AGENT_PORT: "6831"

  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.priority: "10"
        traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd

      hosts:
        - host: '{{ .Values.global.domainName }}'
          paths:
            - path: '/'
              pathType: Prefix
      tls:
        - hosts: ['{{ .Values.global.domainName }}']
          secretName: '{{ .Values.global.domainName | replace "." "-" }}'

  persistence:
    config:
      enabled: true
      type: pvc
      size: 10Gi
      accessMode: ReadWriteOnce

    downloads:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: torrent-transmission-downloads
      mountPath: /downloads

    movies:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: plex-movies
      mountPath: /mnt/media/movies

  podSecurityContext:
    runAsUser: 666
    runAsGroup: 666
    fsGroup: 666
    fsGroupChangePolicy: Always

  probes:
    liveness:
      spec:
        exec:
          command:
            - /usr/bin/env
            - bash
            - -c
            - curl --fail localhost:${APP_PORT}/${APP_NAME/-//}/api/v3/system/status?apiKey=`IFS=\> && while
              read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`


sonarr:
  controller:
    enabled: true

  env:
    TZ: Europe/Zurich
    APP_NAME: Sonarr
    APP_PORT: "8989"
    SONARR__AUTHENTICATION_METHOD: "None" # v4: External
    JAEGER_AGENT_HOST:
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    JAEGER_AGENT_PORT: "6831"

  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.priority: "10"
        traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd

      hosts:
        - host: 'sonarr.framsburg.ch'
          paths:
            - path: '/'
              pathType: Prefix
      tls:
        - hosts: ['sonarr.framsburg.ch']
          secretName: 'sonarr-framsburg-ch-tls'

  persistence:
    config:
      enabled: true
      type: pvc
      size: 10Gi
      accessMode: ReadWriteOnce

    downloads:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: torrent-transmission-downloads
      mountPath: /downloads

    tv-abcd:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: plex-tv-abcd
      mountPath: /mnt/media/tv-abcd

    tv-efgh:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: plex-tv-efgh
      mountPath: /mnt/media/tv-efgh

    tv-mnop:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: plex-tv-mnop
      mountPath: /mnt/media/tv-mnop

    tv-qrst:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: plex-tv-qrst
      mountPath: /mnt/media/tv-qrst

  podSecurityContext:
    runAsUser: 666
    runAsGroup: 666
    fsGroup: 666
    fsGroupChangePolicy: Always

  probes:
    liveness:
      spec:
        exec:
          command:
            - /usr/bin/env
            - bash
            - -c
            - curl --fail localhost:${APP_PORT}/${APP_NAME/-//}/api/v3/system/status?apiKey=`IFS=\> && while
              read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`

prowlarr:
  controller:
    enabled: true

  initContainers:
    prowlarr:
      name: config-prowlarr
      image: docker.io/ubuntu:groovy
      securityContext:
        runAsUser: 666
        runAsGroup: 666

  env:
    TZ: Europe/Zurich
    APP_NAME: Prowlarr
    APP_PORT: "9696"
    PGID: "666"
    PUID: "666"
    JAEGER_AGENT_HOST:
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    JAEGER_AGENT_PORT: "6831"

  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.priority: "10"
        traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd

      hosts:
        - host: 'prowlarr.framsburg.ch'
          paths:
            - path: '/'
              pathType: Prefix
      tls:
        - hosts: ['prowlarr.framsburg.ch']
          secretName: 'prowlarr-framsburg-ch-tls'

  persistence:
    config:
      enabled: true
      type: pvc
      size: 10Gi
      accessMode: ReadWriteOnce

  probes:
    liveness:
      spec:
        exec:
          command:
            - /usr/bin/env
            - bash
            - -c
            - curl --fail localhost:${APP_PORT}/${APP_NAME/-//}/api/v1/system/status?apiKey=`IFS=\> && while
              read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`

tdarr:
  controller:
    enabled: true

  env:
    TZ: Europe/Zurich
    JAEGER_AGENT_HOST:
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    JAEGER_AGENT_PORT: "6831"

  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.priority: "10"
        traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd

      hosts:
        - host: 'tdarr.framsburg.ch'
          paths:
            - path: '/'
              pathType: Prefix
      tls:
        - hosts: ['tdarr.framsburg.ch']
          secretName: 'tdarr-framsburg-ch-tls'

  persistence:
    config:
      enabled: true
      type: pvc
      size: 1Gi
      accessMode: ReadWriteOnce

    data:
      enabled: true
      type: pvc
      size: 10Gi
      accessMode: ReadWriteOnce

overseerr:
  operator:
    verify:
      failOnError: false
  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd

      hosts:
        - host: 'overseerr.framsburg.ch'
          paths:
            - path: '/'
              pathType: Prefix
      tls:
        - hosts: [ 'overseerr.framsburg.ch' ]
          secretName: 'overseerr-framsburg-ch-tls'

  persistence:
    config:
      type: pvc
      size: 1Gi
      retain: true
      accessMode: ReadWriteOnce

whisparr:
  operator:
    verify:
      failOnError: false
  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.middlewares: authentik-authentik@kubernetescrd

      hosts:
        - host: 'whisparr.framsburg.ch'
          paths:
            - path: '/'
              pathType: Prefix
      tls:
        - hosts: [ 'whisparr.framsburg.ch' ]
          secretName: 'whisparr-framsburg-ch-tls'

  persistence:
    config:
      type: pvc
      size: 1Gi
      retain: true
      accessMode: ReadWriteOnce

    downloads:
      enabled: true
      type: pvc
      retain: true
      storageClass: "-"
      existingClaim: torrent-transmission-downloads
      mountPath: /downloads
